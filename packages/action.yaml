# yamllint disable rule:line-length
---
name: packages

description: |
  Specify version to install optional terraform-action@workflows packages and
  perform scan. Use "installed" to perform static analysis with package
  pre-installed on Runner. 

inputs:

  working-directory:
    description: Set working directory. Default is ./.
    required: false
    default: .

  cosign-version:
    description: Specify cosign version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "2.2.0"

  terraform-version:
    description: Specify terraform version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  tflint-version:
    description: Specify tflint version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  tfsec-version:
    description: Specify tfsec version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  checkov-version:
    description: Specify checkov version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  snyk-version:
    description: Specify snyk version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  terrascan-version:
    description: Specify terrascan version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  driftctl-version:
    description: Specify driftctl version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  infracost-version:
    description: Specify infracost version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

  trivy-version:
    description: Specify trivy version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: ""

runs:
  using: "composite"
  
  steps:
    - name: install cosign 
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: v${{ inputs.cosign-version }}

    - name: install terraform
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.terraform-version }}" != "installed" && "${{ inputs.terraform-version }}" != "" ]]; then
          echo "Install terraform v${{ inputs.terraform-version }}"

          # download and import HashiCorp public key
          curl --remote-name https://keybase.io/hashicorp/pgp_keys.asc
          if result=$(gpg --import pgp_keys.asc 2>&1); then
            echo "loaded HashiCorp public key"
          else
              echo "Unable to import HashiCorp key"
              echo "GPG Output:"
              echo "$result"
          fi

          # download terraform installation packages
          curl --remote-name "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_linux_amd64.zip"
          curl --remote-name "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_SHA256SUMS"
          curl --remote-name "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_SHA256SUMS.sig"

          # verify SHA signature
          if result=$(gpg --verify "terraform_${{ inputs.terraform-version }}_SHA256SUMS.sig" "terraform_${{ inputs.terraform-version }}_SHA256SUMS" 2>&1); then
              echo "Verified SHA signature"
          else
              echo "Unable to verify SHA signature"
              echo "GPG Output:"
              echo "$result"
              exit 1
          fi

          # verify terraform cli package
          if result=$(shasum --ignore-missing --algorithm 256 --check "terraform_${{ inputs.terraform-version }}_SHA256SUMS" 2>&1); then
              echo "Verified terraform package"
          else
              echo "Unable to verify terraform package"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test terraform cli
          sudo unzip -o "terraform_${{ inputs.terraform-version }}_linux_amd64.zip" -d /usr/local/bin
          terraform version
        fi

    - name: install tflint
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.tflint-version }}" != "installed" && "${{ inputs.tflint-version }}" != "" ]]; then
          echo "Install tflint v${{ inputs.tflint-version }}"

          # download tflint and verification packages
          curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/tflint_linux_amd64.zip"
          curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/checksums.txt"
          curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/checksums.txt.pem"
          curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/checksums.txt.keyless.sig"

          # verify cosign origination
          if result=$(cosign verify-blob --certificate=checksums.txt.pem --signature=checksums.txt.keyless.sig --certificate-identity-regexp="^https://github.com/terraform-linters/tflint" --certificate-oidc-issuer=https://token.actions.githubusercontent.com checksums.txt 2>&1); then
              echo "Verified cosign build source"
          else
              echo "Unable to verify cosign build source"
              echo "cosign Output:"
              echo "$result"
              exit 1
          fi

          # verify cosign package sha
          if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
              echo "Verified tflint package sha"
          else
              echo "Unable to verify tflint package sha"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test tflint
          sudo unzip -o tflint_linux_amd64.zip -d /usr/local/bin
          tflint --version
        fi

    - name: install tfsec
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        install_public_key() {
          cat <<- EOD > tfsec.key
          -----BEGIN PGP PUBLIC KEY BLOCK-----

          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
          nX5QmAEwF/nBYV3Du7TIvHtz91yL8A==
          =opqY
          -----END PGP PUBLIC KEY BLOCK-----
        EOD
        }
        if [[ "${{ inputs.tfsec-version }}" != "installed" && "${{ inputs.tfsec-version }}" != "" ]]; then
          echo "Install tfsec v${{ inputs.tfsec-version }}"

          # load tfsec and verification packages
          curl -SLO "https://github.com/aquasecurity/tfsec/releases/download/v${{ inputs.tfsec-version }}/tfsec-linux-amd64"
          curl -SLO "https://github.com/aquasecurity/tfsec/releases/download/v${{ inputs.tfsec-version }}/tfsec-linux-amd64.D66B222A3EA4C25D5D1A097FC34ACEFB46EC39CE.sig"
          curl -SLO "https://github.com/aquasecurity/tfsec/releases/download/v${{ inputs.tfsec-version }}/tfsec_checksums.txt"
          grep tfsec-linux-amd64 < tfsec_checksums.txt > checksums.txt
          # install_public_key

          # import public key
          # if result=$(gpg --import tfsec.key 2>&1); then
          #   echo "loaded aquasec/tfsec public key"
          # else
          #     echo "Unable to import aquasec/tfsec public key"
          #     echo "GPG Output:"
          #     echo "$result"
          # fi

          # verify tfsec package signature
          # if result=$(gpg --verify tfsec-linux-amd64.D66B222A3EA4C25D5D1A097FC34ACEFB46EC39CE.sig tfsec-linux-amd64 2>&1); then
          #     echo "Verified SHA signature"
          # else
          #     echo "Unable to verify SHA signature"
          #     echo "GPG Output:"
          #     echo "$result"
          #     exit 1
          # fi

          # verify tfsec package sha
          if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
              echo "Verified tfsec package sha"
          else
              echo "Unable to verify tfsec build source"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test tfsec
          sudo mv tfsec-linux-amd64 tfsec
          sudo chmod +x tfsec
          sudo mv tfsec /usr/local/bin/tfsec
          tfsec --version
        fi

    - name: install checkov
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.checkov-version }}" != "installed" && "${{ inputs.checkov-version }}" != "" ]]; then
          echo "Install checkov v${{ inputs.checkov-version }}"

          sudo pip install --no-cache-dir checkov==${{ inputs.checkov-version }}
          checkov --version
        fi

    - name: install snyk
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.snyk-version }}" != "installed" && "${{ inputs.snyk-version }}" != "" ]]; then
          echo "Install snyk v${{ inputs.snyk-version }}"

          # download snyk and verification packages
          SNYK_SIGNING_KEY=A22665FB96CAB0E0973604C83676C4B8289C296E
          SNYK_PACKAGE_NAME=$(grep -q 'ID=alpine' /etc/os-release && echo "snyk-alpine" || echo "snyk-linux")
          curl -sSLO "https://static.snyk.io/cli/v${{ inputs.snyk-version }}/${SNYK_PACKAGE_NAME}"
          curl -sSLO "https://static.snyk.io/cli/v${{ inputs.snyk-version }}/sha256sums.txt.asc"
          grep "${SNYK_PACKAGE_NAME}" < sha256sums.txt.asc > checksums.txt
          gpg --keyserver hkps://keys.openpgp.org --recv-keys "${SNYK_SIGNING_KEY}"

          # verify snyk package sha
          if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
              echo "Verified snyk package sha"
          else
              echo "Unable to verify snyk package sha"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # verify signature
          if result=$(gpg --verify sha256sums.txt.asc  2>&1); then
              echo "Verified signature"
          else
              echo "Unable to verify signature"
              echo "GPG Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test snyk
          sudo chmod +x "${SNYK_PACKAGE_NAME}"
          sudo mv "${SNYK_PACKAGE_NAME}" /usr/local/bin/snyk
          snyk version
        fi

    - name: install terrascan
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.terrascan-version }}" != "installed" && "${{ inputs.terrascan-version }}" != "" ]]; then
          echo "Install terrascan v${{ inputs.terrascan-version }}"

          # download terrascan and verification packages
          curl -SLO "https://github.com/tenable/terrascan/releases/download/v${{ inputs.terrascan-version }}/checksums.txt"
          curl -SLO "https://github.com/tenable/terrascan/releases/download/v${{ inputs.terrascan-version }}/terrascan_${{ inputs.terrascan-version }}_Linux_x86_64.tar.gz"

          # verify terrascan package sha
          if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
              echo "Verified terrascan package sha"
          else
              echo "Unable to verify terrascan package sha"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test terrascan
          sudo tar -xf "terrascan_${{ inputs.terrascan-version }}_Linux_x86_64.tar.gz" terrascan
          sudo mv terrascan /usr/local/bin/terrascan
          terrascan version
        fi

    - name: install driftctl
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.driftctl-version }}" != "installed" && "${{ inputs.driftctl-version }}" != "" ]]; then
          echo "Install driftctl v${{ inputs.driftctl-version }}"
          # download driftctl and verification packages
          curl -SLO "https://github.com/snyk/driftctl/releases/download/v${{ inputs.driftctl-version }}/driftctl_linux_amd64"
          curl -SLO "https://github.com/snyk/driftctl/releases/download/v${{ inputs.driftctl-version }}/driftctl_SHA256SUMS"
          curl -SLO "https://github.com/snyk/driftctl/releases/download/v${{ inputs.driftctl-version }}/driftctl_SHA256SUMS.gpg"
          gpg --keyserver hkps://keys.openpgp.org --recv-keys 65DDA08AA1605FC8211FC928FFB5FCAFD223D274

          # verify package signature
          if result=$(gpg --verify driftctl_SHA256SUMS.gpg driftctl_SHA256SUMS 2>&1); then
              echo "Verified driftctl signature"
          else
              echo "Unable to verify driftctl signature"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # verify package sha
          if result=$(shasum --ignore-missing --algorithm 256 --check driftctl_SHA256SUMS 2>&1); then
              echo "Verified driftctl package sha"
          else
              echo "Unable to verify driftctl package sha"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          sudo chmod +x driftctl_linux_amd64
          sudo mv driftctl_linux_amd64 /usr/local/bin/driftctl
          driftctl version
        fi

    - name: install infracost
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.infracost-version }}" != "installed" && "${{ inputs.infracost-version }}" != "" ]]; then
          echo "Install infracost v${{ inputs.infracost-version }}"
          # download infracost and verification packages
          curl -SLO "https://github.com/infracost/infracost/releases/download/v${{ inputs.infracost-version }}/infracost-linux-amd64.tar.gz"
          curl -SLO "https://github.com/infracost/infracost/releases/download/v${{ inputs.infracost-version }}/infracost-linux-amd64.tar.gz.sha256"

          # verify package sha
          if result=$(shasum --ignore-missing --algorithm 256 --check infracost-linux-amd64.tar.gz.sha256 2>&1); then
              echo "Verified infracost package sha"
          else
              echo "Unable to verify infracost package sha"
              echo "shasum Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test infracost
          sudo tar -xf infracost-linux-amd64.tar.gz
          sudo mv infracost-linux-amd64 /usr/local/bin/infracost
          infracost --version
        fi

    - name: install trivy
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        if [[ "${{ inputs.trivy-version }}" != "installed" && "${{ inputs.trivy-version }}" != "" ]]; then
          echo "Install trivy v${{ inputs.trivy-version }}"
          # download trivy package and verification packages
          curl -SLO "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz"
          curl -SLO "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.pem"
          curl -SLO "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.sig"

          # verify signature
          if result=$(cosign verify-blob "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz" --certificate "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.pem" --signature "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.sig" --certificate-identity-regexp 'https://github\.com/aquasecurity/trivy/\.github/workflows/.+' --certificate-oidc-issuer "https://token.actions.githubusercontent.com" 2>&1); then
              echo "Verified trivy installation package"
          else
              echo "Unable to verify trivy installation package"
              echo "cosign Output:"
              echo "$result"
              exit 1
          fi

          # install and smoke test trivy
          sudo tar -xzf "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz"
          sudo mv trivy /usr/local/bin/trivy
          trivy --version
        fi
